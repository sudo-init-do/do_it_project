/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.53.v20231009
 * Generated at: 2025-09-12 11:22:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.maintenance;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

  List<String> requests = (List<String>) request.getAttribute("requests");
  if (requests == null) requests = new ArrayList<>();

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <title>List of Maintenance Requests</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/css/app.css\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<header class=\"topbar slim\">\n");
      out.write("  <div class=\"brand\">\n");
      out.write("    <a class=\"brand-name\" href=\"");
      out.print(request.getContextPath());
      out.write("/\">instanta</a>\n");
      out.write("    <span class=\"app-name\">Fleet Management</span>\n");
      out.write("  </div>\n");
      out.write("</header>\n");
      out.write("<main class=\"container\" style=\"display: flex; justify-content: center; align-items: flex-start; min-height: 80vh;\">\n");
      out.write("  <div class=\"card\" style=\"box-shadow: 0 4px 16px rgba(37,99,235,0.07); border-radius: 16px; padding: 32px 28px; max-width: 1200px; width: 100%;\">\n");
      out.write("    <div class=\"tabs\">\n");
      out.write("      <a href=\"");
      out.print(request.getContextPath());
      out.write("/app/maintenance/new\" class=\"tab\">Details</a>\n");
      out.write("      <a href=\"");
      out.print(request.getContextPath());
      out.write("/app/maintenance/files\" class=\"tab\">Files</a>\n");
      out.write("      <a href=\"");
      out.print(request.getContextPath());
      out.write("/app/maintenance/past\" class=\"tab\">Past Maintenance(s)</a>\n");
      out.write("      <a href=\"");
      out.print(request.getContextPath());
      out.write("/app/maintenance/history\" class=\"tab\">History</a>\n");
      out.write("      <a href=\"");
      out.print(request.getContextPath());
      out.write("/app/maintenance/list\" class=\"tab active\">List of Requests</a>\n");
      out.write("    </div>\n");
      out.write("    <h2 style=\"margin-bottom: 18px;\">All Maintenance Requests</h2>\n");
      out.write("    <style>\n");
      out.write("      .table {\n");
      out.write("        width: 100%;\n");
      out.write("        border-collapse: separate;\n");
      out.write("        border-spacing: 0;\n");
      out.write("        font-size: 15px;\n");
      out.write("        background: #fff;\n");
      out.write("        border-radius: 12px;\n");
      out.write("        overflow: hidden;\n");
      out.write("        box-shadow: 0 2px 8px rgba(0,0,0,0.04);\n");
      out.write("      }\n");
      out.write("      .table th, .table td {\n");
      out.write("        padding: 12px 14px;\n");
      out.write("        text-align: left;\n");
      out.write("        vertical-align: middle;\n");
      out.write("      }\n");
      out.write("      .table th {\n");
      out.write("        background: #e3edfa;\n");
      out.write("        color: #2563eb;\n");
      out.write("        font-weight: 700;\n");
      out.write("        border-bottom: 2px solid #dbeafe;\n");
      out.write("        letter-spacing: 0.02em;\n");
      out.write("        font-size: 16px;\n");
      out.write("      }\n");
      out.write("      .table tr {\n");
      out.write("        border-bottom: 1px solid var(--line);\n");
      out.write("        transition: background 0.2s;\n");
      out.write("      }\n");
      out.write("      .table tr:nth-child(even) {\n");
      out.write("        background: #f6f8fa;\n");
      out.write("      }\n");
      out.write("      .table tr:hover {\n");
      out.write("        background: #dbeafe;\n");
      out.write("      }\n");
      out.write("      .table td {\n");
      out.write("        font-size: 15px;\n");
      out.write("        color: #222;\n");
      out.write("        max-width: 180px;\n");
      out.write("        white-space: nowrap;\n");
      out.write("        overflow: hidden;\n");
      out.write("        text-overflow: ellipsis;\n");
      out.write("      }\n");
      out.write("      @media (max-width: 900px) {\n");
      out.write("        .table th, .table td {\n");
      out.write("          padding: 8px 6px;\n");
      out.write("          font-size: 13px;\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    </style>\n");
      out.write("    <div style=\"overflow-x: auto;\">\n");
      out.write("      <table class=\"table\" style=\"margin-bottom: 24px; min-width: 1000px;\">\n");
      out.write("      <thead>\n");
      out.write("        <tr>\n");
      out.write("          <th>Office</th>\n");
      out.write("          <th>Client</th>\n");
      out.write("          <th>Vehicle</th>\n");
      out.write("          <th>Driver</th>\n");
      out.write("          <th>Status</th>\n");
      out.write("          <th>Date</th>\n");
      out.write("          <th>Fault Type</th>\n");
      out.write("          <th>Mileage</th>\n");
      out.write("          <th>Time</th>\n");
      out.write("          <th>Location</th>\n");
      out.write("          <th>Workshop</th>\n");
      out.write("          <th>Complaint</th>\n");
      out.write("          <th>Comments</th>\n");
      out.write("          <th>Attachment</th>\n");
      out.write("          <th>Submitted</th>\n");
      out.write("        </tr>\n");
      out.write("      </thead>\n");
      out.write("      <tbody>\n");
      out.write("        ");
 for (String line : requests) { 
             Map<String,String> map = new HashMap<>();
             String[] entries = line.split("; ");
             for(String entry : entries) {
               int idx = entry.indexOf('=');
               if(idx > 0) {
                 String key = entry.substring(0, idx).trim();
                 String val = entry.substring(idx+1).replaceAll("[\\[\\]]"," ").trim();
                 map.put(key, val);
               }
             }
        
      out.write("\n");
      out.write("          <tr>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("office",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("client",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("vehicle",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("driver",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("status",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("date",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("faultType",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("mileage",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("time",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("location",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("workshop",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("complaint",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("comments",""));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("attachment","").isEmpty()?"-":map.get("attachment"));
      out.write("</td>\n");
      out.write("            <td>");
      out.print(map.getOrDefault("dateSubmitted",""));
      out.write("</td>\n");
      out.write("          </tr>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("      </tbody>\n");
      out.write("    </table>\n");
      out.write("    <div style=\"margin-top: 24px;\">\n");
      out.write("      <a href=\"");
      out.print(request.getContextPath());
      out.write("/app/maintenance/new\" class=\"tab-btn\">Create Maintenance</a>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</main>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
